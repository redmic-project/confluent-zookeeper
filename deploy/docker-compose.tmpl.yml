version: '3.5'

services:
  zookeeper:
    image: ${IMAGE_NAME:-confluentinc/cp-zookeeper}:${IMAGE_TAG:-latest}
    hostname: zk-{{.Task.Slot}}
    environment:
      ZOOKEEPER_SERVER_ID: '{{.Task.Slot}}'
      ZOOKEEPER_CLIENT_PORT: ${ZK_PORT}
      KAFKA_JMX_PORT:
      ZOOKEEPER_TICK_TIME:
      ZOOKEEPER_INIT_LIMIT:
      ZOOKEEPER_SYNC_LIMIT:
      ZOOKEEPER_AUTOPURGE_SNAP_RETAIN_COUNT:
      ZOOKEEPER_AUTOPURGE_PURGE_INTERVAL:
      ZOOKEEPER_SERVERS:
      KAFKA_JMX_HOSTNAME: zk-{{.Task.Slot}}
      ZOOKEEPER_LOG4J_ROOT_LOGLEVEL: ${LOG_LEVEL}
      KAFKA_OPTS: -javaagent:/jmx_prometheus_javaagent.jar=${JMX_HTTP_PORT}:/config.yaml
    networks:
      kafka-net:
      metric-net:
    configs:
      - source: jmx-prometheus-javaagent
        target: /jmx_prometheus_javaagent.jar
      - source: jmx-prometheus-config
        target: /config.yaml
    volumes:
      - zk-data-vol:/var/lib/zookeeper/data
      - zk-log-vol:/var/lib/zookeeper/log
      - zk-secrets-vol:/etc/zookeeper/secrets
    healthcheck:
      test: echo ruok | nc localhost ${ZK_PORT}
      interval: 1m
      timeout: 30s
      retries: 20
      start_period: 2m
    deploy:
      mode: replicated
      replicas: 3
      restart_policy:
        delay: 30s
        window: 2m
      update_config:
        parallelism: 1
        delay: 30s
        order: stop-first

networks:
  kafka-net:
    name: ${KAFKA_NET_NAME:-kafka-net}
    driver: overlay
    attachable: ${KAFKA_NET_ATTACHABLE:-true}

  metric-net:
    name: ${METRIC_NET_NAME:-metric-net}
    external: true

volumes:
  zk-secrets-vol:
    name: ${ZK_SECRETS_VOL_NAME}

configs:
  jmx-prometheus-javaagent:
    name: ${JMX_PROMETHEUS_JAVA_AGENT_NAME:-jmx-prometheus-javaagent-0.11.0}
    file: ./config/jmx_prometheus_javaagent-0.11.0.jar

  jmx-prometheus-config:
    name: ${JMX_PROMETHEUS_CONFIG_NAME:-jmx-prometheus-config-0.11.0}
    file: ./config/config.yaml
